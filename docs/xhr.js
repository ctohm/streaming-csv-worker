(() => {
  var A = Object.create;
  var M = Object.defineProperty;
  var I = Object.getOwnPropertyDescriptor;
  var B = Object.getOwnPropertyNames;
  var D = Object.getPrototypeOf, H = Object.prototype.hasOwnProperty;
  var N = (t) => M(t, "__esModule", { value: !0 });
  var q = (t, e) => () => (e || t((e = { exports: {} }).exports, e), e.exports);
  var z = (t, e, n) => {
    if (e && typeof e == "object" || typeof e == "function")
      for (let a of B(e))
        !H.call(t, a) && a !== "default" && M(t, a, { get: () => e[a], enumerable: !(n = I(e, a)) || n.enumerable });
    return t;
  }, J = (t) => z(N(M(t != null ? A(D(t)) : {}, "default", t && t.__esModule && "default" in t ? { get: () => t.default, enumerable: !0 } : { value: t, enumerable: !0 })), t);

  // node_modules/streamsaver/StreamSaver.js
  var x = q((U, R) => {
    ((t, e) => {
      typeof R != "undefined" ? R.exports = e() : typeof define == "function" && typeof define.amd == "object" ? define(e) : U[t] = e();
    })("streamSaver", () => {
      "use strict";
      let t = typeof window == "object" ? window : U;
      t.HTMLElement || console.warn("streamsaver is meant to run on browsers main thread");
      let e = null, n = !1, a = (s) => {
        try {
          s();
        } catch (r) {
        }
      }, m = t.WebStreamsPolyfill || {}, c = t.isSecureContext, o = /constructor/i.test(t.HTMLElement) || !!t.safari || !!t.WebKitPoint, p = c || "MozAppearance" in document.documentElement.style ? "iframe" : "navigate", u = {
        createWriteStream: j,
        WritableStream: t.WritableStream || m.WritableStream,
        supported: !0,
        version: { full: "2.0.5", major: 2, minor: 0, dot: 5 },
        mitm: "https://jimmywarting.github.io/StreamSaver.js/mitm.html?version=2.0.0"
      };
      function y(s) {
        if (!s)
          throw new Error("meh");
        let r = document.createElement("iframe");
        return r.hidden = !0, r.src = s, r.loaded = !1, r.name = "iframe", r.isIframe = !0, r.postMessage = (...d) => r.contentWindow.postMessage(...d), r.addEventListener("load", () => {
          r.loaded = !0;
        }, { once: !0 }), document.body.appendChild(r), r;
      }
      function E(s) {
        let r = "width=200,height=100", d = document.createDocumentFragment(), l = {
          frame: t.open(s, "popup", r),
          loaded: !1,
          isIframe: !1,
          isPopup: !0,
          remove() {
            l.frame.close();
          },
          addEventListener(...i) {
            d.addEventListener(...i);
          },
          dispatchEvent(...i) {
            d.dispatchEvent(...i);
          },
          removeEventListener(...i) {
            d.removeEventListener(...i);
          },
          postMessage(...i) {
            l.frame.postMessage(...i);
          }
        }, h = (i) => {
          i.source === l.frame && (l.loaded = !0, t.removeEventListener("message", h), l.dispatchEvent(new Event("load")));
        };
        return t.addEventListener("message", h), l;
      }
      try {
        new Response(new ReadableStream()), c && !("serviceWorker" in navigator) && (o = !0);
      } catch (s) {
        o = !0;
      }
      a(() => {
        let { readable: s } = new TransformStream(), r = new MessageChannel();
        r.port1.postMessage(s, [s]), r.port1.close(), r.port2.close(), n = !0, Object.defineProperty(u, "TransformStream", {
          configurable: !1,
          writable: !1,
          value: TransformStream
        });
      });
      function v() {
        e || (e = c ? y(u.mitm) : E(u.mitm));
      }
      function j(s, r, d) {
        let l = {
          size: null,
          pathname: null,
          writableStrategy: void 0,
          readableStrategy: void 0
        }, h = 0, i = null, f = null, T = null;
        if (Number.isFinite(r) ? ([d, r] = [r, d], console.warn("[StreamSaver] Depricated pass an object as 2nd argument when creating a write stream"), l.size = d, l.writableStrategy = r) : r && r.highWaterMark ? (console.warn("[StreamSaver] Depricated pass an object as 2nd argument when creating a write stream"), l.size = d, l.writableStrategy = r) : l = r || {}, !o) {
          v(), f = new MessageChannel(), s = encodeURIComponent(s.replace(/\//g, ":")).replace(/['()]/g, escape).replace(/\*/g, "%2A");
          let b = {
            transferringReadable: n,
            pathname: l.pathname || Math.random().toString().slice(-6) + "/" + s,
            headers: {
              "Content-Type": "application/octet-stream; charset=utf-8",
              "Content-Disposition": "attachment; filename*=UTF-8''" + s
            }
          };
          l.size && (b.headers["Content-Length"] = l.size);
          let g = [b, "*", [f.port2]];
          if (n) {
            let w = p === "iframe" ? void 0 : {
              transform(k, F) {
                if (!(k instanceof Uint8Array))
                  throw new TypeError("Can only wirte Uint8Arrays");
                h += k.length, F.enqueue(k), i && (location.href = i, i = null);
              },
              flush() {
                i && (location.href = i);
              }
            };
            T = new u.TransformStream(w, l.writableStrategy, l.readableStrategy);
            let W = T.readable;
            f.port1.postMessage({ readableStream: W }, [W]);
          }
          f.port1.onmessage = (w) => {
            w.data.download && (p === "navigate" ? (e.remove(), e = null, h ? location.href = w.data.download : i = w.data.download) : (e.isPopup && (e.remove(), e = null, p === "iframe" && y(u.mitm)), y(w.data.download)));
          }, e.loaded ? e.postMessage(...g) : e.addEventListener("load", () => {
            e.postMessage(...g);
          }, { once: !0 });
        }
        let L = [];
        return !o && T && T.writable || new u.WritableStream({
          write(b) {
            if (!(b instanceof Uint8Array))
              throw new TypeError("Can only wirte Uint8Arrays");
            if (o) {
              L.push(b);
              return;
            }
            f.port1.postMessage(b), h += b.length, i && (location.href = i, i = null);
          },
          close() {
            if (o) {
              let b = new Blob(L, { type: "application/octet-stream; charset=utf-8" }), g = document.createElement("a");
              g.href = URL.createObjectURL(b), g.download = s, g.click();
            } else
              f.port1.postMessage("end");
          },
          abort() {
            L = [], f.port1.postMessage("abort"), f.port1.onmessage = null, f.port1.close(), f.port2.close(), f = null;
          }
        }, l.writableStrategy);
      }
      return u;
    });
  });

  // src/xhr.ts
  var P = J(x()), S = [], O = new PerformanceObserver((t) => {
    t.getEntries().forEach((e) => {
      let { startTime: n, duration: a, name: m, entryType: c } = e;
      n = Math.floor(n), a = Math.floor(a);
      let o = n + a, p = { name: m, endTime: o, startTime: n, duration: a, entryType: c };
      console.log(p), S.push(p);
    });
  }), C = new PerformanceObserver((t) => {
    t.getEntriesByType("resource").forEach((e) => {
      let { serverTiming: n, startTime: a, duration: m, name: c, entryType: o } = e;
      if (c.includes("mitm") || c.includes("favicon"))
        return;
      a = Math.floor(a), m = Math.floor(m), /^https?:\/\//.test(c) && (c = String(c.split("/").pop()));
      let p = a + m, u = { name: c, endTime: p, startTime: a, duration: m, entryType: o };
      console.log(e.toJSON()), n.forEach((y) => {
        let { name: E, duration: v, description: j } = y, s = Number(j), r = s + v;
        S.push({ name: E, duration: v, startTime: s, entryType: "server", endTime: r });
      }), S.push(u);
    });
  });
  function X(t, e = "file.txt", n) {
    let a = !1;
    console.log({ url: t }), performance.mark("download:start");
    let m = !1;
    P.default.mitm = `${location.origin}/mitm.html`;
    let c = P.default.createWriteStream(e);
    return window.onunload = () => {
      c.abort();
    }, window.onbeforeunload = (o) => {
      m || (o.returnValue = "Are you sure you want to leave?");
    }, fetch(t, {
      headers: {
        TE: "trailers",
        startTime: String(performance.now()),
        started_at: String(Math.floor(Date.now() - performance.now())),
        "cache-control": "no-cache, no-store, max-age=1, s-maxage=1"
      }
    }).then((o) => (performance.mark("download:ttfb"), !o.body || !o.ok ? Promise.reject(new Error(o.statusText)) : o.body.pipeTo(c))).then(() => {
      m = !0, performance.mark("download:finish"), requestIdleCallback(() => {
        n();
      });
    });
  }
  function _() {
    let t = S.sort((e, n) => e.endTime - n.endTime).reduce((e, n) => {
      let { name: a, endTime: m, startTime: c, duration: o, entryType: p } = n;
      return e[a] = { endTime: m, startTime: c, duration: o, entryType: p }, e;
    }, {});
    window.requestIdleCallback(() => {
      console.table(t), O && O.disconnect(), C && C.disconnect();
    });
  }
  O.observe({ entryTypes: ["mark", "measure"] });
  C.observe({ entryTypes: ["resource"] });
  requestIdleCallback(() => {
    X("/csv/fetch.json", "fetch.json", () => {
      _();
    });
  });
})();
//# sourceMappingURL=data:application/json;base64,
