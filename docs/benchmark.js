(()=>{var Je=Object.create;var Ce=Object.defineProperty;var Ge=Object.getOwnPropertyDescriptor;var Qe=Object.getOwnPropertyNames;var Ve=Object.getPrototypeOf,Ye=Object.prototype.hasOwnProperty;var Ze=e=>Ce(e,"__esModule",{value:!0});var et=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var tt=(e,t,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of Qe(t))!Ye.call(e,s)&&s!=="default"&&Ce(e,s,{get:()=>t[s],enumerable:!(a=Ge(t,s))||a.enumerable});return e},ze=e=>tt(Ze(Ce(e!=null?Je(Ve(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var Me=et((Le,Ae)=>{(function(e,t){typeof define=="function"&&define.amd?define([],t):typeof Ae=="object"&&typeof Le!="undefined"?Ae.exports=t():e.Papa=t()})(Le,function e(){"use strict";var t=typeof self!="undefined"?self:typeof window!="undefined"?window:t!==void 0?t:{},a=!t.document&&!!t.postMessage,s=a&&/blob:/i.test((t.location||{}).protocol),l={},o=0,i={parse:function(n,r){var u=(r=r||{}).dynamicTyping||!1;if(T(u)&&(r.dynamicTypingFunction=u,u={}),r.dynamicTyping=u,r.transform=!!T(r.transform)&&r.transform,r.worker&&i.WORKERS_SUPPORTED){var d=function(){if(!i.WORKERS_SUPPORTED)return!1;var S=(j=t.URL||t.webkitURL||null,A=e.toString(),i.BLOB_URL||(i.BLOB_URL=j.createObjectURL(new Blob(["(",A,")();"],{type:"text/javascript"})))),E=new t.Worker(S),j,A;return E.onmessage=fe,E.id=o++,l[E.id]=E}();return d.userStep=r.step,d.userChunk=r.chunk,d.userComplete=r.complete,d.userError=r.error,r.step=T(r.step),r.chunk=T(r.chunk),r.complete=T(r.complete),r.error=T(r.error),delete r.worker,void d.postMessage({input:n,config:r,workerId:d.id})}var p=null;return i.NODE_STREAM_INPUT,typeof n=="string"?p=r.download?new v(r):new g(r):n.readable===!0&&T(n.read)&&T(n.on)?p=new x(r):(t.File&&n instanceof File||n instanceof Object)&&(p=new f(r)),p.stream(n)},unparse:function(n,r){var u=!1,d=!0,p=",",S=`\r
`,E='"',j=E+E,A=!1,m=null,M=!1;(function(){if(typeof r=="object"){if(typeof r.delimiter!="string"||i.BAD_DELIMITERS.filter(function(c){return r.delimiter.indexOf(c)!==-1}).length||(p=r.delimiter),(typeof r.quotes=="boolean"||typeof r.quotes=="function"||Array.isArray(r.quotes))&&(u=r.quotes),typeof r.skipEmptyLines!="boolean"&&typeof r.skipEmptyLines!="string"||(A=r.skipEmptyLines),typeof r.newline=="string"&&(S=r.newline),typeof r.quoteChar=="string"&&(E=r.quoteChar),typeof r.header=="boolean"&&(d=r.header),Array.isArray(r.columns)){if(r.columns.length===0)throw new Error("Option columns is empty");m=r.columns}r.escapeChar!==void 0&&(j=r.escapeChar+E),typeof r.escapeFormulae=="boolean"&&(M=r.escapeFormulae)}})();var _=new RegExp(O(E),"g");if(typeof n=="string"&&(n=JSON.parse(n)),Array.isArray(n)){if(!n.length||Array.isArray(n[0]))return te(null,n,A);if(typeof n[0]=="object")return te(m||Object.keys(n[0]),n,A)}else if(typeof n=="object")return typeof n.data=="string"&&(n.data=JSON.parse(n.data)),Array.isArray(n.data)&&(n.fields||(n.fields=n.meta&&n.meta.fields),n.fields||(n.fields=Array.isArray(n.data[0])?n.fields:typeof n.data[0]=="object"?Object.keys(n.data[0]):[]),Array.isArray(n.data[0])||typeof n.data[0]=="object"||(n.data=[n.data])),te(n.fields||[],n.data||[],A);throw new Error("Unable to serialize unrecognized input");function te(c,P,I){var H="";typeof c=="string"&&(c=JSON.parse(c)),typeof P=="string"&&(P=JSON.parse(P));var z=Array.isArray(c)&&0<c.length,F=!Array.isArray(P[0]);if(z&&d){for(var U=0;U<c.length;U++)0<U&&(H+=p),H+=W(c[U],U);0<P.length&&(H+=S)}for(var w=0;w<P.length;w++){var C=z?c.length:P[w].length,D=!1,L=z?Object.keys(P[w]).length===0:P[w].length===0;if(I&&!z&&(D=I==="greedy"?P[w].join("").trim()==="":P[w].length===1&&P[w][0].length===0),I==="greedy"&&z){for(var R=[],k=0;k<C;k++){var q=F?c[k]:k;R.push(P[w][q])}D=R.join("").trim()===""}if(!D){for(var y=0;y<C;y++){0<y&&!L&&(H+=p);var $=z&&F?c[y]:y;H+=W(P[w][$],y)}w<P.length-1&&(!I||0<C&&!L)&&(H+=S)}}return H}function W(c,P){if(c==null)return"";if(c.constructor===Date)return JSON.stringify(c).slice(1,25);M===!0&&typeof c=="string"&&c.match(/^[=+\-@].*$/)!==null&&(c="'"+c);var I=c.toString().replace(_,j),H=typeof u=="boolean"&&u||typeof u=="function"&&u(c,P)||Array.isArray(u)&&u[P]||function(z,F){for(var U=0;U<F.length;U++)if(-1<z.indexOf(F[U]))return!0;return!1}(I,i.BAD_DELIMITERS)||-1<I.indexOf(p)||I.charAt(0)===" "||I.charAt(I.length-1)===" ";return H?E+I+E:I}}};if(i.RECORD_SEP=String.fromCharCode(30),i.UNIT_SEP=String.fromCharCode(31),i.BYTE_ORDER_MARK="\uFEFF",i.BAD_DELIMITERS=["\r",`
`,'"',i.BYTE_ORDER_MARK],i.WORKERS_SUPPORTED=!a&&!!t.Worker,i.NODE_STREAM_INPUT=1,i.LocalChunkSize=10485760,i.RemoteChunkSize=5242880,i.DefaultDelimiter=",",i.Parser=K,i.ParserHandle=N,i.NetworkStreamer=v,i.FileStreamer=f,i.StringStreamer=g,i.ReadableStreamStreamer=x,t.jQuery){var h=t.jQuery;h.fn.parse=function(n){var r=n.config||{},u=[];return this.each(function(S){if(!(h(this).prop("tagName").toUpperCase()==="INPUT"&&h(this).attr("type").toLowerCase()==="file"&&t.FileReader)||!this.files||this.files.length===0)return!0;for(var E=0;E<this.files.length;E++)u.push({file:this.files[E],inputElem:this,instanceConfig:h.extend({},r)})}),d(),this;function d(){if(u.length!==0){var S,E,j,A,m=u[0];if(T(n.before)){var M=n.before(m.file,m.inputElem);if(typeof M=="object"){if(M.action==="abort")return S="AbortError",E=m.file,j=m.inputElem,A=M.reason,void(T(n.error)&&n.error({name:S},E,j,A));if(M.action==="skip")return void p();typeof M.config=="object"&&(m.instanceConfig=h.extend(m.instanceConfig,M.config))}else if(M==="skip")return void p()}var _=m.instanceConfig.complete;m.instanceConfig.complete=function(te){T(_)&&_(te,m.file,m.inputElem),p()},i.parse(m.file,m.instanceConfig)}else T(n.complete)&&n.complete()}function p(){u.splice(0,1),d()}}}function b(n){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(r){var u=V(r);u.chunkSize=parseInt(u.chunkSize),r.step||r.chunk||(u.chunkSize=null),this._handle=new N(u),(this._handle.streamer=this)._config=u}.call(this,n),this.parseChunk=function(r,u){if(this.isFirstChunk&&T(this._config.beforeFirstChunk)){var d=this._config.beforeFirstChunk(r);d!==void 0&&(r=d)}this.isFirstChunk=!1,this._halted=!1;var p=this._partialLine+r;this._partialLine="";var S=this._handle.parse(p,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var E=S.meta.cursor;this._finished||(this._partialLine=p.substring(E-this._baseIndex),this._baseIndex=E),S&&S.data&&(this._rowCount+=S.data.length);var j=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(s)t.postMessage({results:S,workerId:i.WORKER_ID,finished:j});else if(T(this._config.chunk)&&!u){if(this._config.chunk(S,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);S=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(S.data),this._completeResults.errors=this._completeResults.errors.concat(S.errors),this._completeResults.meta=S.meta),this._completed||!j||!T(this._config.complete)||S&&S.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),j||S&&S.meta.paused||this._nextChunk(),S}this._halted=!0},this._sendError=function(r){T(this._config.error)?this._config.error(r):s&&this._config.error&&t.postMessage({workerId:i.WORKER_ID,error:r,finished:!1})}}function v(n){var r;(n=n||{}).chunkSize||(n.chunkSize=i.RemoteChunkSize),b.call(this,n),this._nextChunk=a?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(u){this._input=u,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(r=new XMLHttpRequest,this._config.withCredentials&&(r.withCredentials=this._config.withCredentials),a||(r.onload=J(this._chunkLoaded,this),r.onerror=J(this._chunkError,this)),r.open(this._config.downloadRequestBody?"POST":"GET",this._input,!a),this._config.downloadRequestHeaders){var u=this._config.downloadRequestHeaders;for(var d in u)r.setRequestHeader(d,u[d])}if(this._config.chunkSize){var p=this._start+this._config.chunkSize-1;r.setRequestHeader("Range","bytes="+this._start+"-"+p)}try{r.send(this._config.downloadRequestBody)}catch(S){this._chunkError(S.message)}a&&r.status===0&&this._chunkError()}},this._chunkLoaded=function(){r.readyState===4&&(r.status<200||400<=r.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:r.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(u){var d=u.getResponseHeader("Content-Range");return d===null?-1:parseInt(d.substring(d.lastIndexOf("/")+1))}(r),this.parseChunk(r.responseText)))},this._chunkError=function(u){var d=r.statusText||u;this._sendError(new Error(d))}}function f(n){var r,u;(n=n||{}).chunkSize||(n.chunkSize=i.LocalChunkSize),b.call(this,n);var d=typeof FileReader!="undefined";this.stream=function(p){this._input=p,u=p.slice||p.webkitSlice||p.mozSlice,d?((r=new FileReader).onload=J(this._chunkLoaded,this),r.onerror=J(this._chunkError,this)):r=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var p=this._input;if(this._config.chunkSize){var S=Math.min(this._start+this._config.chunkSize,this._input.size);p=u.call(p,this._start,S)}var E=r.readAsText(p,this._config.encoding);d||this._chunkLoaded({target:{result:E}})},this._chunkLoaded=function(p){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(p.target.result)},this._chunkError=function(){this._sendError(r.error)}}function g(n){var r;b.call(this,n=n||{}),this.stream=function(u){return r=u,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var u,d=this._config.chunkSize;return d?(u=r.substring(0,d),r=r.substring(d)):(u=r,r=""),this._finished=!r,this.parseChunk(u)}}}function x(n){b.call(this,n=n||{});var r=[],u=!0,d=!1;this.pause=function(){b.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){b.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(p){this._input=p,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){d&&r.length===1&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),r.length?this.parseChunk(r.shift()):u=!0},this._streamData=J(function(p){try{r.push(typeof p=="string"?p:p.toString(this._config.encoding)),u&&(u=!1,this._checkIsFinished(),this.parseChunk(r.shift()))}catch(S){this._streamError(S)}},this),this._streamError=J(function(p){this._streamCleanUp(),this._sendError(p)},this),this._streamEnd=J(function(){this._streamCleanUp(),d=!0,this._streamData("")},this),this._streamCleanUp=J(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function N(n){var r,u,d,p=Math.pow(2,53),S=-p,E=/^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/,j=/^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/,A=this,m=0,M=0,_=!1,te=!1,W=[],c={data:[],errors:[],meta:{}};if(T(n.step)){var P=n.step;n.step=function(w){if(c=w,z())H();else{if(H(),c.data.length===0)return;m+=w.data.length,n.preview&&m>n.preview?u.abort():(c.data=c.data[0],P(c,A))}}}function I(w){return n.skipEmptyLines==="greedy"?w.join("").trim()==="":w.length===1&&w[0].length===0}function H(){if(c&&d&&(U("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+i.DefaultDelimiter+"'"),d=!1),n.skipEmptyLines)for(var w=0;w<c.data.length;w++)I(c.data[w])&&c.data.splice(w--,1);return z()&&function(){if(!c)return;function C(L,R){T(n.transformHeader)&&(L=n.transformHeader(L,R)),W.push(L)}if(Array.isArray(c.data[0])){for(var D=0;z()&&D<c.data.length;D++)c.data[D].forEach(C);c.data.splice(0,1)}else c.data.forEach(C)}(),function(){if(!c||!n.header&&!n.dynamicTyping&&!n.transform)return c;function C(L,R){var k,q=n.header?{}:[];for(k=0;k<L.length;k++){var y=k,$=L[k];n.header&&(y=k>=W.length?"__parsed_extra":W[k]),n.transform&&($=n.transform($,y)),$=F(y,$),y==="__parsed_extra"?(q[y]=q[y]||[],q[y].push($)):q[y]=$}return n.header&&(k>W.length?U("FieldMismatch","TooManyFields","Too many fields: expected "+W.length+" fields but parsed "+k,M+R):k<W.length&&U("FieldMismatch","TooFewFields","Too few fields: expected "+W.length+" fields but parsed "+k,M+R)),q}var D=1;return!c.data.length||Array.isArray(c.data[0])?(c.data=c.data.map(C),D=c.data.length):c.data=C(c.data,0),n.header&&c.meta&&(c.meta.fields=W),M+=D,c}()}function z(){return n.header&&W.length===0}function F(w,C){return D=w,n.dynamicTypingFunction&&n.dynamicTyping[D]===void 0&&(n.dynamicTyping[D]=n.dynamicTypingFunction(D)),(n.dynamicTyping[D]||n.dynamicTyping)===!0?C==="true"||C==="TRUE"||C!=="false"&&C!=="FALSE"&&(function(L){if(E.test(L)){var R=parseFloat(L);if(S<R&&R<p)return!0}return!1}(C)?parseFloat(C):j.test(C)?new Date(C):C===""?null:C):C;var D}function U(w,C,D,L){var R={type:w,code:C,message:D};L!==void 0&&(R.row=L),c.errors.push(R)}this.parse=function(w,C,D){var L=n.quoteChar||'"';if(n.newline||(n.newline=function(q,y){q=q.substring(0,1048576);var $=new RegExp(O(y)+"([^]*?)"+O(y),"gm"),Y=(q=q.replace($,"")).split("\r"),G=q.split(`
`),se=1<G.length&&G[0].length<Y[0].length;if(Y.length===1||se)return`
`;for(var re=0,Q=0;Q<Y.length;Q++)Y[Q][0]===`
`&&re++;return re>=Y.length/2?`\r
`:"\r"}(w,L)),d=!1,n.delimiter)T(n.delimiter)&&(n.delimiter=n.delimiter(w),c.meta.delimiter=n.delimiter);else{var R=function(q,y,$,Y,G){var se,re,Q,B;G=G||[",","	","|",";",i.RECORD_SEP,i.UNIT_SEP];for(var oe=0;oe<G.length;oe++){var X=G[oe],pe=0,ne=0,je=0;Q=void 0;for(var ye=new K({comments:Y,delimiter:X,newline:y,preview:10}).parse(q),Te=0;Te<ye.data.length;Te++)if($&&I(ye.data[Te]))je++;else{var _e=ye.data[Te].length;ne+=_e,Q!==void 0?0<_e&&(pe+=Math.abs(_e-Q),Q=_e):Q=_e}0<ye.data.length&&(ne/=ye.data.length-je),(re===void 0||pe<=re)&&(B===void 0||B<ne)&&1.99<ne&&(re=pe,se=X,B=ne)}return{successful:!!(n.delimiter=se),bestDelimiter:se}}(w,n.newline,n.skipEmptyLines,n.comments,n.delimitersToGuess);R.successful?n.delimiter=R.bestDelimiter:(d=!0,n.delimiter=i.DefaultDelimiter),c.meta.delimiter=n.delimiter}var k=V(n);return n.preview&&n.header&&k.preview++,r=w,u=new K(k),c=u.parse(r,C,D),H(),_?{meta:{paused:!0}}:c||{meta:{paused:!1}}},this.paused=function(){return _},this.pause=function(){_=!0,u.abort(),r=T(n.chunk)?"":r.substring(u.getCharIndex())},this.resume=function(){A.streamer._halted?(_=!1,A.streamer.parseChunk(r,!0)):setTimeout(A.resume,3)},this.aborted=function(){return te},this.abort=function(){te=!0,u.abort(),c.meta.aborted=!0,T(n.complete)&&n.complete(c),r=""}}function O(n){return n.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function K(n){var r,u=(n=n||{}).delimiter,d=n.newline,p=n.comments,S=n.step,E=n.preview,j=n.fastMode,A=r=n.quoteChar===void 0?'"':n.quoteChar;if(n.escapeChar!==void 0&&(A=n.escapeChar),(typeof u!="string"||-1<i.BAD_DELIMITERS.indexOf(u))&&(u=","),p===u)throw new Error("Comment character same as delimiter");p===!0?p="#":(typeof p!="string"||-1<i.BAD_DELIMITERS.indexOf(p))&&(p=!1),d!==`
`&&d!=="\r"&&d!==`\r
`&&(d=`
`);var m=0,M=!1;this.parse=function(_,te,W){if(typeof _!="string")throw new Error("Input must be a string");var c=_.length,P=u.length,I=d.length,H=p.length,z=T(S),F=[],U=[],w=[],C=m=0;if(!_)return B();if(j||j!==!1&&_.indexOf(r)===-1){for(var D=_.split(d),L=0;L<D.length;L++){if(w=D[L],m+=w.length,L!==D.length-1)m+=d.length;else if(W)return B();if(!p||w.substring(0,H)!==p){if(z){if(F=[],G(w.split(u)),oe(),M)return B()}else G(w.split(u));if(E&&E<=L)return F=F.slice(0,E),B(!0)}}return B()}for(var R=_.indexOf(u,m),k=_.indexOf(d,m),q=new RegExp(O(A)+O(r),"g"),y=_.indexOf(r,m);;)if(_[m]!==r)if(p&&w.length===0&&_.substring(m,m+H)===p){if(k===-1)return B();m=k+I,k=_.indexOf(d,m),R=_.indexOf(u,m)}else if(R!==-1&&(R<k||k===-1))w.push(_.substring(m,R)),m=R+P,R=_.indexOf(u,m);else{if(k===-1)break;if(w.push(_.substring(m,k)),Q(k+I),z&&(oe(),M))return B();if(E&&F.length>=E)return B(!0)}else for(y=m,m++;;){if((y=_.indexOf(r,y+1))===-1)return W||U.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:F.length,index:m}),re();if(y===c-1)return re(_.substring(m,y).replace(q,r));if(r!==A||_[y+1]!==A){if(r===A||y===0||_[y-1]!==A){R!==-1&&R<y+1&&(R=_.indexOf(u,y+1)),k!==-1&&k<y+1&&(k=_.indexOf(d,y+1));var $=se(k===-1?R:Math.min(R,k));if(_[y+1+$]===u){w.push(_.substring(m,y).replace(q,r)),_[m=y+1+$+P]!==r&&(y=_.indexOf(r,m)),R=_.indexOf(u,m),k=_.indexOf(d,m);break}var Y=se(k);if(_.substring(y+1+Y,y+1+Y+I)===d){if(w.push(_.substring(m,y).replace(q,r)),Q(y+1+Y+I),R=_.indexOf(u,m),y=_.indexOf(r,m),z&&(oe(),M))return B();if(E&&F.length>=E)return B(!0);break}U.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:F.length,index:m}),y++}}else y++}return re();function G(X){F.push(X),C=m}function se(X){var pe=0;if(X!==-1){var ne=_.substring(y+1,X);ne&&ne.trim()===""&&(pe=ne.length)}return pe}function re(X){return W||(X===void 0&&(X=_.substring(m)),w.push(X),m=c,G(w),z&&oe()),B()}function Q(X){m=X,G(w),w=[],k=_.indexOf(d,m)}function B(X){return{data:F,errors:U,meta:{delimiter:u,linebreak:d,aborted:M,truncated:!!X,cursor:C+(te||0)}}}function oe(){S(B()),F=[],U=[]}},this.abort=function(){M=!0},this.getCharIndex=function(){return m}}function fe(n){var r=n.data,u=l[r.workerId],d=!1;if(r.error)u.userError(r.error,r.file);else if(r.results&&r.results.data){var p={abort:function(){d=!0,ee(r.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:ae,resume:ae};if(T(u.userStep)){for(var S=0;S<r.results.data.length&&(u.userStep({data:r.results.data[S],errors:r.results.errors,meta:r.results.meta},p),!d);S++);delete r.results}else T(u.userChunk)&&(u.userChunk(r.results,p,r.file),delete r.results)}r.finished&&!d&&ee(r.workerId,r.results)}function ee(n,r){var u=l[n];T(u.userComplete)&&u.userComplete(r),u.terminate(),delete l[n]}function ae(){throw new Error("Not implemented.")}function V(n){if(typeof n!="object"||n===null)return n;var r=Array.isArray(n)?[]:{};for(var u in n)r[u]=V(n[u]);return r}function J(n,r){return function(){n.apply(r,arguments)}}function T(n){return typeof n=="function"}return s&&(t.onmessage=function(n){var r=n.data;if(i.WORKER_ID===void 0&&r&&(i.WORKER_ID=r.workerId),typeof r.input=="string")t.postMessage({workerId:i.WORKER_ID,results:i.parse(r.input,r.config),finished:!0});else if(t.File&&r.input instanceof File||r.input instanceof Object){var u=i.parse(r.input,r.config);u&&t.postMessage({workerId:i.WORKER_ID,results:u,finished:!0})}}),(v.prototype=Object.create(b.prototype)).constructor=v,(f.prototype=Object.create(b.prototype)).constructor=f,(g.prototype=Object.create(g.prototype)).constructor=g,(x.prototype=Object.create(b.prototype)).constructor=x,i})});function Ne(e,t,a){let s=new WebSocket(e);if(!s)throw new Error("server didn't accept ws");if(!globalThis.pusher){globalThis.pusher=new Pusher("c47a4f4b7988cf53c2e6",{cluster:"us2"});var l=globalThis.pusher.subscribe("my-channel");l.bind("my-event",({message:o})=>{let{detail:i,error:h,name:b,duration:v,endTime:f,startTime:g}=o;if(b&&v&&(f||g)){b==="response"&&globalThis.entries.push(o),!f&&g&&(f=g+v),f&&!g&&(g=f-v);let x={name:b,duration:v,startTime:g,entryType:"server",endTime:f};globalThis.entries.push(x)}else h?console.error(h):console.info({message:o})})}return s.addEventListener("open",()=>{console.log("Opened websocket"),s.send(JSON.stringify({timeOrigin:performance.timeOrigin,now:performance.now(),timestamp:Date.now()})),a()}),s.addEventListener("message",({data:o})=>{let i=JSON.parse(o),{count:h,tz:b,error:v,name:f,duration:g,endTime:x,responseStart:N}=i;if(N)t.push(i);else if(f&&g&&x){let O=x-g,K={start:O,name:f,duration:g,startTime:O,entryType:"server",endTime:x};t.push(K)}else v?console.error(v):console.info({count:h,tz:b,error:v})}),s.addEventListener("close",()=>{}),s}function We(e){let t=new PerformanceObserver(l=>{l.getEntries().forEach(o=>{let{startTime:i,duration:h,name:b,entryType:v}=o;i=Math.floor(i),h=Math.floor(h);let f=i+h,g={name:b,startTime:i,duration:h,endTime:f,entryType:v};e.push(g)})}),a=new PerformanceObserver(l=>{l.getEntriesByType("resource").forEach(o=>{let{startTime:i,duration:h,name:b,entryType:v,responseStart:f,responseEnd:g,serverTiming:x,initiatorType:N}=o;b.includes("mitm")||b.includes("favicon")||(i=Math.floor(i),h=Math.floor(h),g=Math.floor(g),f=Math.floor(f),/^https?:\/\//.test(b)&&(b=String(b.split("/").pop())),e=e.concat([{name:`${N}:request_sent`,startTime:i,duration:0,endTime:i,entryType:"mark"},{name:`${N}:response_start`,startTime:i,duration:f-i,endTime:f,entryType:"resource"},{name:`${N}:response_complete`,startTime:f-i,duration:g-f,endTime:g,entryType:"resource"}]),x.forEach(O=>{let{name:K,duration:fe,description:ee,...ae}=O,V=Number(ee.replace("endtime","").split("_").pop()),J=V-fe;e.push({name:K,duration:fe,startTime:J,entryType:"server",endTime:V})}),console.log(o.toJSON()))})});return{ro:a,po:t,listEntries:()=>{let l=e.sort((o,i)=>o.endTime-i.endTime).reduce((o,i)=>{let{name:h,endTime:b,startTime:v,duration:f,entryType:g}=i;return o[h]={endTime:b,startTime:v,duration:f,entryType:g},o},{});window.requestIdleCallback(()=>{console.table(l),t&&t.disconnect(),a&&a.disconnect()})}}}globalThis.HTMLElement||console.warn("streamsaver is meant to run on browsers main thread");var Z=null,xe=!1,rt=e=>{try{e()}catch(t){}},nt=globalThis.WebStreamsPolyfill||{},Oe=globalThis.isSecureContext,me=/constructor/i.test(globalThis.HTMLElement)||!!globalThis.safari||!!globalThis.WebKitPoint,De=Oe||"MozAppearance"in document.documentElement.style?"iframe":"navigate",de={createWriteStream:st,WritableStream:globalThis.WritableStream||nt.WritableStream,supported:!0,version:{full:"2.0.5",major:2,minor:0,dot:5},mitm:"https://jimmywarting.github.io/StreamSaver.js/mitm.html?version=2.0.0"};function Pe(e){if(!e)throw new Error("meh");let t=document.createElement("iframe");return t.hidden=!0,t.src=e,t.loaded=!1,t.name="iframe",t.isIframe=!0,t.postMessage=(...a)=>t.contentWindow.postMessage(...a),t.addEventListener("load",()=>{t.loaded=!0},{once:!0}),document.body.appendChild(t),t}function it(e){let t="width=200,height=100",a=document.createDocumentFragment(),s={frame:globalThis.open(e,"popup",t),loaded:!1,isIframe:!1,isPopup:!0,remove(){s.frame.close()},addEventListener(...o){a.addEventListener(...o)},dispatchEvent(...o){a.dispatchEvent(...o)},removeEventListener(...o){a.removeEventListener(...o)},postMessage(...o){s.frame.postMessage(...o)}},l=o=>{o.source===s.frame&&(s.loaded=!0,globalThis.removeEventListener("message",l),s.dispatchEvent(new Event("load")))};return globalThis.addEventListener("message",l),s}try{new Response(new ReadableStream),Oe&&!("serviceWorker"in navigator)&&(me=!0)}catch(e){me=!0}rt(()=>{let{readable:e}=new TransformStream,t=new MessageChannel;t.port1.postMessage(e,[e]),t.port1.close(),t.port2.close(),xe=!0,Object.defineProperty(de,"TransformStream",{configurable:!1,writable:!1,value:TransformStream})});function at(){Z||(Z=Oe?Pe(de.mitm):it(de.mitm))}function st(e,t,a){let s={size:null,pathname:null,writableStrategy:void 0,readableStrategy:void 0},l=0,o=null,i=null,h=null;if(Number.isFinite(t)?([a,t]=[t,a],console.warn("[StreamSaver] Deprecated pass an object as 2nd argument when creating a write stream"),s.size=a,s.writableStrategy=t):t&&t.highWaterMark?(console.warn("[StreamSaver] Deprecated pass an object as 2nd argument when creating a write stream"),s.size=a,s.writableStrategy=t):s=t||{},!me){at(),i=new MessageChannel,e=encodeURIComponent(e.replace(/\//g,":")).replace(/['()]/g,escape).replace(/\*/g,"%2A");let v={transferringReadable:xe,pathname:s.pathname||Math.random().toString().slice(-6)+"/"+e,headers:{"Content-Type":"application/octet-stream; charset=utf-8","Content-Disposition":"attachment; filename*=UTF-8''"+e}};s.size&&(v.headers["Content-Length"]=s.size);let f=[v,"*",[i.port2]];if(xe){let g=De==="iframe"?void 0:{transform(N,O){if(!(N instanceof Uint8Array))throw new TypeError("Can only write Uint8Arrays");l+=N.length,O.enqueue(N),o&&(location.href=o,o=null)},flush(){o&&(location.href=o)}};h=new de.TransformStream(g,s.writableStrategy,s.readableStrategy);let x=h.readable;i.port1.postMessage({readableStream:x},[x])}i.port1.onmessage=g=>{g.data.download&&(De==="navigate"?(Z.remove(),Z=null,l?location.href=g.data.download:o=g.data.download):(Z.isPopup&&(Z.remove(),Z=null,De==="iframe"&&Pe(de.mitm)),Pe(g.data.download)))},Z.loaded?Z.postMessage(...f):Z.addEventListener("load",()=>{Z.postMessage(...f)},{once:!0})}let b=[];return!me&&h&&h.writable||new de.WritableStream({write(v){if(!(v instanceof Uint8Array))throw new TypeError("Can only write Uint8Arrays");if(me){b.push(v);return}i.port1.postMessage(v),l+=v.length,o&&(location.href=o,o=null)},close(){if(me){let v=new Blob(b,{type:"application/octet-stream; charset=utf-8"}),f=document.createElement("a");f.href=URL.createObjectURL(v),f.download=e,f.click()}else i.port1.postMessage("end")},abort(){b=[],i.port1.postMessage("abort"),i.port1.onmessage=null,i.port1.close(),i.port2.close(),i=null}},s.writableStrategy)}var ie=de;function ve(e,t="file.txt",a){let s=!1,l=!1;ie.mitm=`${location.origin}/mitm.html`;let o=ie.createWriteStream(t);return window.onunload=()=>{o.abort()},window.onbeforeunload=i=>{l||(i.returnValue="Are you sure you want to leave?")},fetch(e,{headers:{TE:"trailers",startTime:String(performance.now()),timeOrigin:String(Math.floor(Date.now()-performance.now())),"cache-control":"no-cache, no-store, max-age=1, s-maxage=1"}}).then(i=>!i.body||!i.ok?Promise.reject(new Error(i.statusText)):i.body.pipeTo(o)).then(()=>{l=!0,performance.mark("download:tear_down"),requestIdleCallback(()=>{a()})})}var qe=ze(Me());var ce=ze(Me());function Ie(){return{data:[],errors:[],meta:{}}}var ke=class{abort(){throw new Error("Method not implemented.")}parse(t,a,s){throw new Error("Method not implemented.")}getCharIndex(){throw new Error("Method not implemented.")}constructor(t={}){var a=t.dynamicTyping||!1;he(a)&&(t.dynamicTypingFunction=a,a={}),t.dynamicTyping=a,t.transform=he(t.transform)?t.transform:!1,this._finished=!1,this._completed=!1,this._halted=!1,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this.isFirstChunk=!0,this._completeResults=Ie(),t.withCredentials=t.withCredentials||"same-origin",this.decoder=new TextDecoder,this.replaceConfig({chunkSize:ot.RemoteChunkSize,...t})}async stream(t){let a;if(t instanceof Response)a=t;else if(t instanceof Request)console.log("input is a request"),a=await fetch(t);else{this._input=t;let s;this._config.downloadRequestBody&&(s=JSON.stringify(this._config.downloadRequestBody));let l=new Request(this._input,{method:this._config.downloadRequestBody?"POST":"GET",credentials:this._config.withCredentials,body:s});if(this._config.downloadRequestHeaders)for(let o in this._config.downloadRequestHeaders)l.headers.set(o,this._config.downloadRequestHeaders[o]);a=await fetch(l)}if(!a.ok||!a.body)throw new Error(a.statusText);return this.reader=a.body.getReader(),this._readChunk()}async _readChunk(){return this._finished?this._chunkLoaded({done:!0,value:void 0}):this.reader.read().then(({done:t,value:a})=>this._chunkLoaded({done:t,value:a}))}_chunkLoaded({done:t,value:a}){let s=a?this.decoder.decode(a):this.decoder.decode();return this._finished=t,this.parseChunk(s)}async parseChunk(t){if(this.isFirstChunk&&he(this._config.beforeFirstChunk)){var a=this._config.beforeFirstChunk(t);a!==void 0&&(t=a)}this.isFirstChunk=!1,this._halted=!1;var s=this._partialLine+t;this._partialLine="";let l=this._handle.parse(s,this._baseIndex,!this._finished);if(this._handle.paused()||this._handle.aborted())return this._halted=!0,console.log("_halted"),this.reader.cancel(),l;var o=l.meta.cursor;this._finished||(this._partialLine=s.substring(o-this._baseIndex),this._baseIndex=o),this._rowCount+=((l||{}).data||[]).length;var i=this._finished||this._config.preview&&this._rowCount>=this._config.preview;return he(this._config.chunk)&&(this._config.chunk(l),l=Ie(),this._completeResults=Ie()),!this._config.step&&!this._config.chunk&&(this._completeResults.data=this._completeResults.data.concat(l.data),this._completeResults.errors=this._completeResults.errors.concat(l.errors),this._completeResults.meta=l.meta),!this._completed&&i&&he(this._config.complete)&&(!l||!l.meta.aborted)&&(console.log({_rowCount:this._rowCount,config:this._config,finishedIncludingPreview:i,thisChunkLength:t.length}),this._config.complete(this._completeResults),this._completed=!0),!i&&(!l||!l.meta.paused)?this._readChunk():l}replaceConfig(t){var a=He(t);a.chunkSize=Number(a.chunkSize),!t.step&&!t.chunk&&(a.chunkSize=null),this._handle=new ce.ParserHandle(a),this._handle.streamer=this,this._config=a}},ot={RECORD_SEP:String.fromCharCode(30),UNIT_SEP:String.fromCharCode(31),BYTE_ORDER_MARK:"\uFEFF",BAD_DELIMITERS:["\r",`
`,'"',"\uFEFF"],WORKERS_SUPPORTED:!1,NODE_STREAM_INPUT:0,LocalChunkSize:1024*1024*10,RemoteChunkSize:1024*1024*5,DefaultDelimiter:",",Parser:ce.Parser,ParserHandle:ce.ParserHandle,parse:(e,t)=>{t=t||{};var a=t.dynamicTyping||!1;return he(a)&&(t.dynamicTypingFunction=a,a={}),t.dynamicTyping=a,t.transform=he(t.transform)?t.transform:!1,typeof e=="string"&&t.download&&!globalThis.XMLHttpRequest&&globalThis.fetch?new ke(t).stream(e):ce.default.parse(e,t)}};function He(e){if(typeof e!="object"||e===null)return e;var t=Array.isArray(e)?[]:{};for(let a in e)t[a]=He(e[a]);return t}function he(e){return typeof e=="function"}async function Be(e,t,a){ie.mitm=`${location.origin}/mitm.html`;let s=ie.createWriteStream(t),l="",o="[",i=!0,h=new TextEncoder,b=new Request(e,{headers:{startTime:String(performance.now()),timeOrigin:String(performance.timeOrigin),"cache-control":"no-cache, no-store, max-age=1, s-maxage=1"}});performance.mark("papaFetch:start");let v=s.getWriter();return new ke({download:!0,beforeFirstChunk:f=>(performance.mark("papaFetch:end"),f),chunk:f=>{v.write(h.encode(o+JSON.stringify(f.data).replace(/^\[\[(.*)\]\]$/,"[$1]"))),o!==","&&performance.mark("papaFetch:ttfb"),o=","},complete:f=>{v.write(h.encode("]")),v.close();let{startTime:g,duration:x}=performance.measure("papaFetch:request","papaFetch:start","papaFetch:ttfb"),{startTime:N,duration:O}=performance.measure("papaFetch:response","papaFetch:ttfb"),K={name:t,url:e,start:g,requestStart:g,requestDuration:x,responseStart:N,responseDuration:O,duration:x+O};performance.mark("download:tear_down"),a({finalEntry:K})}}).stream(b)}async function $e(e,t,a){performance.mark("XHR:start");let s=!0,l="[",o="";qe.default.RemoteChunkSize=7*1024*1024,qe.default.parse(e,{download:!0,chunkSize:7*1024*1024,beforeFirstChunk:i=>(performance.mark("XHR:finish"),i),downloadRequestHeaders:{startTime:String(performance.now()),timeOrigin:String(Math.floor(Date.now()-performance.now())),"cache-control":"no-cache, no-store, max-age=1, s-maxage=1"},step:i=>{o+=l+JSON.stringify(i.data),l!==","&&performance.mark("XHR:ttfb"),l=","},complete:()=>{o+="]";let i=URL.createObjectURL(new Blob([o],{type:"application/json"}));ve(i,"xhr.json",()=>{let{startTime:h,duration:b}=performance.measure("xhr:request","XHR:start","XHR:ttfb"),{startTime:v,duration:f}=performance.measure("xhr:response","XHR:ttfb"),g={name:t,url:t,start:h,requestStart:h,requestDuration:b,responseStart:v,responseDuration:f,duration:b+f};URL.revokeObjectURL(i),o="",performance.mark("download:tear_down"),a({finalEntry:g})})}})}var ge="http://www.w3.org/2000/svg",le={blocked:"rgb(204, 204, 204)",thirdParty:"rgb(0, 0, 0)",redirect:"rgb(255, 221, 0)",appCache:"rgb(161, 103, 38)",dns:"rgb(48, 150, 158)",tcp:"rgb(255, 157, 66)",ssl:"rgb(213,102, 223)",request:"rgb(0, 202, 74)",response:"rgb(0, 169, 245)"};globalThis.results={};function lt(e,t=0){var a=[],s=[];s=performance.getEntriesByType("resource"),s=s.filter(o=>!o.name.includes("mitm")&&!o.name.includes("bench")&&!o.name.includes("min"));for(var l=0;l<s.length;l++)if(s[l].name.indexOf("/waterfall.js")===-1){let o=ut(s[l],t);a.push(o)}return e&&a.push(e),a}function ut(e,t=0){return{url:e.name.split("/").pop()||"",name:e.name.split("/").pop()||"",start:e.startTime,duration:e.duration,requestStart:+e.requestStart,requestDuration:+e.responseStart-e.requestStart,responseStart:+e.responseStart,responseDuration:+e.responseStart==0?0:e.responseEnd-e.responseStart}}function dt(e,t){let a="waterfall-div";var s=document.getElementById(a);s===null&&(s=document.createElement("div"),s.id=a),s.style.cssText="background:#fff;border: 2px solid #000;position:relative;top:0;left:0;right:0;z-index:99999;margin:0px 8px;padding:0px;",document.body.appendChild(s),s.width=e,s.height=t;let l=s.querySelector("svg"),o=l?Number(l.getAttribute("height")):0;var i=l||document.createElementNS(ge,"svg");return s.appendChild(i),i.id="waterfall-svg",i.setAttribute("width",String(e)),i.setAttribute("oldheight",String(o)),i.setAttribute("height",String(o+t)),i}function ct(e,t){var a=0,s=1e6;for(let g of e){let x=g.start+g.duration;a=Math.max(a,x),s=Math.min(s,g.start)}s=Math.floor(s),e=e.sort((g,x)=>g.start-x.start).map(g=>(g.requestStart-=s,g.responseStart-=s,g.start-=s,g));var l=100,o=(document.body.clientWidth||window.innerWidth||document.documentElement.clientWidth)-16;a-=s;let i=Math.ceil(Math.max(t,a*1.03));var h=15,b=3,v=h+(e.length+1)*(h+b),f=i/(o-l);return{minTime:s,maxTimeScale:i,scaleFactor:f,width:o,barOffset:l,maxTime:a,entries:e,height:v,rowHeight:h,rowPadding:b}}function ht(e,t=0){let{minTime:a,maxTimeScale:s,scaleFactor:l,width:o,barOffset:i,maxTime:h,entries:b,height:v,rowHeight:f,rowPadding:g}=ct(e,t);console.table({minTime:a,maxTimeScale:s,scaleFactor:l,maxScale:t}),a=0;var x=dt(o,v+f),N=x.getAttribute("oldheight");let O=Fe("translate(0,"+N+")");var K=1e3/l,fe=s/K,ee=i,ae=f+g,V=v;let J=i+K/2;for(var T=0;T<fe;T++){T===1+T*2?(O.appendChild(be(J,0-.15*f,0,f*.85,"font: 10px sans-serif","middle","0.5")),O.appendChild(Ee(J,ae,J,V,"stroke: #ccc;"))):(O.appendChild(be(ee,0-.15*f,0,f*.85,"font: 10px sans-serif;","middle",T)),O.appendChild(Ee(ee,ae,ee,V,"stroke: #ccc;")));for(let d of[.25,.5,.75]){let p=ee+d*K;O.appendChild(Ee(p,ae+f*.1,p-f*.1,V,"stroke: #eee;"))}ee+=K}let n=i+h/l;O.appendChild(be(0,0,0,f,`font: 10px sans-serif;transform:translate(${n+f+5}px,70px) rotate(90deg);`,"middle",Math.ceil(h))),O.appendChild(Ee(n,ae+f,n,V+f,"stroke: #ccc;"));for(var T=0;T<b.length;T++){var r=b[T],u=Fe("translate(0,"+(T+1)*(f+g)+")");u.appendChild(be(5,0,0,f,"font: 10px sans-serif;","start",pt(r.url))),u.appendChild(ft(r,i,f,l)),O.appendChild(u)}x.appendChild(O)}function ft(e,t,a,s){var l=Fe(`translate(${t}, ${.25*a})`),o=document.createElementNS(ge,"title");return o.textContent=JSON.stringify(e,function(i,h){if(typeof h=="object")return h;if(!i.endsWith("Start")&&i!="url"&&i!=="name"&&i!=="entryType"&&h!=0)return Number(h).toFixed(1)},"  "),l.appendChild(o),l.appendChild(ue(e.start/s,0,e.duration/s,a,"fill:"+le.blocked)),e.redirectDuration>0&&l.appendChild(ue(e.redirectStart/s,0,e.redirectDuration/s,a,"fill:"+le.redirect)),e.appCacheDuration>0&&l.appendChild(ue(e.appCacheStart/s,0,e.appCacheDuration/s,a,"fill:"+le.appCache)),e.dnsDuration>0&&l.appendChild(ue(e.dnsStart/s,0,e.dnsDuration/s,a,"fill:"+le.dns)),e.tcpDuration>0&&l.appendChild(ue(e.tcpStart/s,0,e.tcpDuration/s,a,"fill:"+le.tcp)),e.sslDuration>0&&l.appendChild(ue(e.sslStart/s,0,e.sslDuration/s,a,"fill:"+le.ssl)),e.requestDuration>0&&(l.appendChild(ue(e.requestStart/s,0,e.requestDuration/s,a,"fill:"+le.request)),l.appendChild(be(5+e.requestStart/s,0,0,a-4,"font: 10px sans-serif;color:white;","requestDuration",Math.round(e.requestDuration)))),e.responseDuration>0&&(l.appendChild(ue(e.responseStart/s,0,e.responseDuration/s,a,"fill:"+le.response)),l.appendChild(be(5+e.responseStart/s,0,0,a-4,"font: 10px sans-serif;color:white;","responseDuration",Math.round(e.responseDuration)))),l}function pt(e){var t=e.match("[^?#]*"),a=t[0];return a.length>50&&(a=a.slice(0,35)+" ... "+a.slice(-10)),a}function Fe(e){var t=document.createElementNS(ge,"g");return t.setAttribute("transform",e),t}function ue(e,t,a,s,l){var o=document.createElementNS(ge,"rect");return o.setAttribute("x",e),o.setAttribute("y",t),o.setAttribute("width",a),o.setAttribute("height",s),o.setAttribute("style",l),o}function Ee(e,t,a,s,l){var o=document.createElementNS(ge,"line");return o.setAttribute("x1",e),o.setAttribute("y1",t),o.setAttribute("x2",a),o.setAttribute("y2",s),o.setAttribute("style",l),o}function be(e,t,a,s,l,o,i){var h=document.createElementNS(ge,"text");return h.setAttribute("x",e),h.setAttribute("y",t),h.setAttribute("dx",a),h.setAttribute("dy",s),h.setAttribute("style",l),h.setAttribute("text-anchor",o),h.appendChild(document.createTextNode(i)),h}function Re(e,t,a){var s=lt(t);return globalThis.results[e]=s,ht(s,a),s}var Xe="Not enough server timings to build a waterfall entry",Ue=(e,t=2)=>new Promise((a,s)=>{setTimeout(()=>{let l=e.filter(b=>b.entryType==="server").sort((b,v)=>b.endTime-v.endTime);if(l.length<2)return console.warn(Xe,{attempts:t,length:l.length}),t--,t>0?a(Ue(e,t)):s(new Error(Xe));let o=l[0],i=l.slice(-1)[0],h={name:"source_csv",url:"node",start:o.startTime,requestStart:o.startTime,requestDuration:o.duration,responseStart:i.startTime,responseDuration:i.duration,duration:i.duration+o.duration};return h?setTimeout(()=>a(h),2e3):a(h)},1e3)});function Ke(e,t="file.txt",a){let s=!1;performance.mark("download:start");let l=!1;ie.mitm=`${location.origin}/mitm.html`;let o=ie.createWriteStream(t);return window.onunload=()=>{o.abort()},window.onbeforeunload=i=>{l||(i.returnValue="Are you sure you want to leave?")},fetch(e,{headers:{TE:"trailers",startTime:String(performance.now()),timeOrigin:String(performance.timeOrigin),"cache-control":"no-cache, no-store, max-age=1, s-maxage=1"}}).then(i=>!i.body||!i.ok?Promise.reject(new Error(i.statusText)):i.body.pipeTo(o)).then(()=>{l=!0,performance.mark("download:tear_down"),a()})}var mt=(e,t)=>{let a=new URL(window.location.origin);a.protocol="wss",a.pathname="/csv/ws",globalThis.ws=Ne(a,t,e)},Se=[];globalThis.waterfall=Re;var we=0;globalThis.measureDownload=e=>new Promise(t=>{globalThis.ws&&globalThis.ws.close(),Se=[],globalThis.entries=Se,performance.clearResourceTimings(),performance.clearMarks(),performance.clearMeasures();let{po:a,ro:s,listEntries:l}=We(globalThis.entries),o=gt(t,l);mt(()=>{let i=performance.now();a.observe({entryTypes:["mark","measure"]}),s.observe({entryTypes:["resource"]}),performance.mark(`starting:${e}`),requestIdleCallback(()=>{if(e.includes("vercel")||e.includes("node")||e.includes("http2"))if(e.includes("papa"))ve("/api/papa",e,()=>{o(e,i)});else{let h=`/api/ts/${e.split(".")[0]}`;Ke(h,e,()=>{Ue(Se,6).then(b=>{b&&(b.url=h.replace("vercel_","node_"),we=Math.max(we,1e4),Re(e,b,we),t(l(globalThis.entries)))})})}else e.includes("papaFetch")?Be(`/csv/${e}`,e.replace(".csv",".json"),o(e,i)):e.includes("xhr")||e.includes("raw")?$e(`/csv/${e}`,e.replace(".csv",".json"),o(e,i)):ve(`/csv/${e}`,e,o(e,i))})},Se)});function gt(e,t){return(a,s)=>({finalEntry:l}={finalEntry:null})=>{setTimeout(()=>{let o=l||Se.find(i=>i.name==="source_csv");we=Math.max(we,Math.ceil(performance.now()-s),1e4),Re(a,o,we),e(t())},1500)}}document.addEventListener("DOMContentLoaded",()=>{globalThis.measureDownload("transform.json")});})();
/* @license
Papa Parse
v5.3.1
https://github.com/mholt/PapaParse
License: MIT
*/
//# sourceMappingURL=data:application/json;base64,
